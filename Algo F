/**
 * Analizador de temperaturas por ubicación y franja horaria
 */
public class AnalizadorTemperaturas {
    private static final String TAG = "AnalizadorTemperaturas";

    // Constantes para franjas horarias
    private static final int HORA_INICIO_MANANA = 8;
    private static final int HORA_FIN_MANANA = 12;
    private static final int HORA_INICIO_TARDE = 14;
    private static final int HORA_FIN_TARDE = 18;
    private static final int HORA_INICIO_NOCHE = 20;
    private static final int HORA_FIN_NOCHE = 22;

    /**
     * Analiza y muestra la temperatura máxima registrada en cada ubicación
     * 
     * @param mediciones Lista de mediciones de temperatura
     * @return Map con las temperaturas máximas por ubicación
     * @throws IllegalArgumentException si la lista de mediciones es nula
     */
    public Map<String, Double> obtenerTemperaturaMaximaPorUbicacion(List<Medicion> mediciones) {
        if (mediciones == null) {
            throw new IllegalArgumentException("La lista de mediciones no puede ser nula");
        }

        Map<String, Double> maxTemperaturas = mediciones.stream()
            .collect(Collectors.groupingBy(
                Medicion::getUbicacion,
                Collectors.mapping(
                    Medicion::getTemperatura,
                    Collectors.maxBy(Double::compare)
                )
            ))
            .entrySet().stream()
            .collect(Collectors.toMap(
                Map.Entry::getKey,
                e -> e.getValue().orElse(0.0)
            ));

        // Registrar resultados
        maxTemperaturas.forEach((ubicacion, temperatura) -> 
            Log.d(TAG, String.format("Ubicación: %s, Temperatura máxima: %.1f°C", 
                ubicacion, temperatura)));

        return Collections.unmodifiableMap(maxTemperaturas);
    }

    /**
     * Calcula y muestra la temperatura media por franja horaria
     * 
     * @param mediciones Lista de mediciones de temperatura
     * @return Map con las temperaturas medias por franja horaria
     * @throws IllegalArgumentException si la lista de mediciones es nula
     */
    public Map<String, Double> calcularTemperaturaMediaPorFranjaHoraria(List<Medicion> mediciones) {
        if (mediciones == null) {
            throw new IllegalArgumentException("La lista de mediciones no puede ser nula");
        }

        Map<String, List<Double>> temperaturasPorFranja = new HashMap<>();
        temperaturasPorFranja.put("Mañana", new ArrayList<>());
        temperaturasPorFranja.put("Tarde", new ArrayList<>());
        temperaturasPorFranja.put("Noche", new ArrayList<>());

        for (Medicion medicion : mediciones) {
            int hora = medicion.getHora();
            double temperatura = medicion.getTemperatura();

            if (estaEnRango(hora, HORA_INICIO_MANANA, HORA_FIN_MANANA)) {
                temperaturasPorFranja.get("Mañana").add(temperatura);
            } else if (estaEnRango(hora, HORA_INICIO_TARDE, HORA_FIN_TARDE)) {
                temperaturasPorFranja.get("Tarde").add(temperatura);
            } else if (estaEnRango(hora, HORA_INICIO_NOCHE, HORA_FIN_NOCHE)) {
                temperaturasPorFranja.get("Noche").add(temperatura);
            }
        }

        Map<String, Double> mediasTemperatura = new HashMap<>();

        temperaturasPorFranja.forEach((franja, temperaturas) -> {
            double media = temperaturas.isEmpty() ? 0.0 :
                temperaturas.stream().mapToDouble(Double::doubleValue).average().getAsDouble();
            mediasTemperatura.put(franja, media);
            Log.d(TAG, String.format("Temperatura media %s: %.1f°C", franja, media));
        });

        return Collections.unmodifiableMap(mediasTemperatura);
    }

    /**
     * Verifica si una hora está dentro de un rango específico
     */
    private boolean estaEnRango(int hora, int inicio, int fin) {
        return hora >= inicio && hora <= fin;
    }

    /**
     * Constructor privado para evitar instanciación
     */
    private AnalizadorTemperaturas() {
        throw new AssertionError("Esta clase no debe ser instanciada");
    }
}
